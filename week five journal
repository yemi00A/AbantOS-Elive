The point where the kernel starts its first user-space, init is significant because that’s where the memory and CPU are finally ready for normal system operation and is where you can see how the rest of the system builds up as a whole
User Space starts in roughly this order:
1.init
2.essential low-level services such as udevd and syslogd
3. network configuration
4. Mid-and high- level service (cron, printing, and so on). Login prompts, GUIs and other high-level applications.
Introduction to init
The init program is a user-space program like any other program on the linux system, and you’ll find it in /sbin along with many of the other system binaries. It main purpose is to start and stop the initial service processes on the system, but new versions have more responsibilities.
There are three major implementations of init in linux distributions
1.	System v init A traditional squenced init, not in common use on recent system
2.	System The standard init for all mainstream linux system distributions
3.	Upstart The init on ubuntu installations prior to version 15.04
 There are many different implementations of init because system V init and other older version relied on a sequence that performed only one startup task at a time. Performance isn’t terrible good because two parts of the boot sequence cannot normally run at once. Another limitation is that you can only start a fixed set of series as defined by the boot sequence.
Systemd and upstart attempt to remedy the performance issue by allowing many service to start in parallel thereby speeding up the boot process. 
There implementations are quite different, though; system is goal oriented. You define a target that you want to achieve, along with its dependencies, and when you want to reach the target.
upstart is reactionary. It receives events and, based on those events, runs jobs that can in turn produce more events, causing upstart to run more jobs, and so on.
System v init spript tend to contain many similar commands designed to start, stop, and restart services. 
Finally, system and upstart both offer some level of on-demand service, rather than trying to start all the services that may be necessary at boot time Cas the system v init would do) they start some service only when needed.
System V Runlevels
At any given time on a linux system, a certain base of processes (Such as crond and udevd) is called its runlevel, which is denoted by a number from 0 through 6.
You can chec your system’s runlevel with the who-I command. A system running upstart responds with something like this:
$who-r
Ren-level 2 2015 -09-06 8:37.
This output tells us that the current runlevel is 2, as well as the date and time that the runlevel was established.
Runlevel serve various purposes, but the most common one is to distinguish between system startup, shut down, single-user mode, and console mode states.
Systemd
The system init is one of the newest init implementations on linux. In addition to handling the regular boot process, system aims in incorporate number of standard unix services such as cron and inetd. One of its most significant features is its ability to defer the start of services and operating system features until they are necessary. 
One of the most interesting things about system is that it does not just operate processes and services, it can also mount filesystem, monitor network socket, run timers, and more. /each type of capability is called a unit when you turn on a unit, you activate it.
System Dependency
Boot-time and operational dependencies are more complicated than may seem at first because strict dependencies are too inflexitble.
Ordering
None of the dependency syntax that you’ve seen so far explicitly specifies order. By default, activating a unit with a require or wants causes sytemd to activate all of these dependencies at the same time as the first unit. This is optional, because you want to start as many services as possible as quickly as possible to reduce boot time.
system configuration file are spread among many directories across the system. There are two main directories for system configuration; the system unit directory (globally configured, usually /usr/lib/ system/system and a system configuration directory (local definitions, usually /etc/system/system.
You can check the current system configuration search path (including precedence) with this command:
#systemctl-p unit path show
To see the system unit and configuration directories on your system, use the following commands:
$pkg-config system – variable= systemdsystemdir
$pkg-config system –variable =systemdsystemconfdir.

Systemd operation
You’ll interact with system primarily through the systemctl command, which allow you to activate and deactivate services, list status, reload the configuration, and much more.
The most essential basic command deal with obtaining unit information. For example, to view a list of active units on your system, issue a list- units command (This is the default command for systemctl, so you don’t really need the list -units part.
Systmct1 list-units
 The output format is typical of a unix information- listing command. For example, the header and the line for media. Mount would look like this.
Unit    load active sub job description.
Boot optimization with Auxiliary units
A common style of unit activation in system attempts to simplify dependency order and speed up boot time. It’s similar to on-demand startup in that a service unit and an auxiliary unit represent the service unit as soon as it active the auxiliary unit .
The reasoning behind this scheme is that essential boot-time service units such as syslog and dbus take some time to start, and many other units depend on them.
Upstart.
The upstart version of units revolve around job and events. Jobs are startup and runtime actions for upstart to perform (such as system service and configuration); and events are messages that upstart receives from itself or other processes (such as udevd). Upstart workds by starting jobs in response to events.
Upstart initialization procedure
Upon startup  upstart does the following
1.	Loads its configuration and the job configuration files in /etc/init
2.	Emit the startup event
3.	Runs jobs configured to start upon receiving the startup event
4.	These initial jobs emit their own events triggering more jobs and events.

Upstart operation
To start an upstart job, use initial start:
#initctl start job
To stop a job, use initctl stop
#inictl stop job
To restart a job
#inictl restart job
If you need to emit an event to upstart, you can do it manually with #initctl emit event.
You can also add environment variable to the emitted event by adding key=vale parameter after event.
The initial RAM filesystem.
The linux boot process is for most part, fairly straight forward. However one component has always been somewhat confounding: init ramfs or the initial RAM filesystem.
The problem stems from the availablility of many different kinds of storage hardware. Remember, the linux kernel does not talk to the pc BIOS or EFI interfaces to get data from disks, so in order to mount its root filesystem, it needs driver support for the underlying storage mechanism. 
The workaround is to gather a small collection of kernel driver modules along with a few other utilities into an archive. The boot loader load this archive into memory before running the kernel. Upon start, the kernel reads the contents of the archive into a temporary RAM filesystem (the initramfs), mount it at /, and perform the user-mode handoff to the init on the init on the initramfs. Then, the utilities included in the initarmfs allow the….

Chapter 7
System Configuration: logging, system Time, Batch jobs, and user’
The Structure of /etc
Most system configuration files on a linux system are found in /etc. 
The trend for many years now has been to place system configuration files into subdirectories under /etc, as you’ve already seen for the boot directories (/etc/init for upstart and /etc/system for system). There are still a few individual configuration files in /etc, but for the most part, if you run ls -f /etc, you’ll see that most of the items there are now subdirectories. 
To solve the problem of overwriting configuration files, you can now place customizations in separate files in the configuration subdirectories.
 
System loging
Most system programs write their diagnostic output to the syslog service. The traditional syslogd daemon waits for messages and, depending on the type of message received, funnels the output to a file, the screen, users, or some combination of these, or just ignores it.
The system logger is one of the most important parts of the system. When something goes wrong and you don’t know where to start, check the system log files first. Most linux distributions runs a new version of syslogd called rsyslog that does much more than simple write log message.
Configuration Files
The base rsyslogd configuration file is /etc/rsylog.conf, but you’ll find certain configurations in other directories, susch as /etc/rsyslog.d. The configuration format is a blend of traditional rules and rsyslog-specific extensions. One rule of thumb is that anything beginning with a dollar sign ($) is an extension. 
A traditional rule has a selector and an action to show how to catch logs and when to send them respectively.
For example
Kern.*   /dev/console
Cron.*  /ver/log/cron.

Facility and Priority
The selector is a pattern that matches the facility and priority of log messages. The facility is a general message category of message.
The function of facility will be fairly obvious from their name.
The priority follows the dot (.) after the facility. The order of priorities from lowest to highest is debug, info, notice, warning, err, crit, alert, or emeg.
When you put a specific priority in a selector, rsyslogd sends messages with that priority and all higher priorities to the destination on that line.
e.g *. Info catches most log messages and put into /var/log/message because info is a relatively low priority.
Troubleshooting
Very little can go wrong with rsylogd. The most common problems occur when a configuration doesn’t catch a certain facility or priority or when log files fill their disk partitions.

User Management Files
Unix systems allows multiple independent users. At the kernel level user are simple number (user IDs), but because it’s much easier to remember a name than a number, you’ll normally work with usernames (or login names) instead of user IDs when managing Linux. Usernames exist only in user space, so any program that works with a username generally needs to be able to map the username to a user ID if it wants to refer to a user when talking to the kernel.
The /etc/passwd file
The plaintext file /etc/passwd maps usernames to user IDs. It looks something like this:
Root:0:0: superuser: /root:/bin/sh.
The /etc/shadow file
The shadow password file (/etc/shadow) on a linux system normally contains user authentication information, including the encrypted passwords and password expiration information that correspond to the users in /etc/passwd.
Manipulating users and passwords
Regular users interact with /etc/passwd using the passwd command. By default, passwd changes the user’s password, but you can also use  -f to change the user’s real name or -s to change the user’s shell to one listed in ‘etc’shells. The passwd command is an suid-root program, because only the superuser can change the etc/passwd file.
Special users
You will find a few special users in /etc/passwd. The super (root) always has UIDO and GIDO, as in listing 7.2 . some users, such as daemon, have no login privilege. The nobody user is an underprivileged user. Some processes run as nobody because the nobody user cannot write to anything on the system. 
The users that cannot login are called pseudo-user
The /etc/shadow files.
The shadow password file (etc/shadow) on a linux system normally contains user Authentication information, including the encrypted passwords and password expiration information that correspond to the user11 in /etc/passwd.
The shadow files was introduced to provide a more flexible and more secure.
Manipulation users and passwords
Regular users interact with /etc/passwd using the passwd command. By default, passwd changes the user’s password, but you can also -f to change the user’s real name or  -s to change the user’s shell to one listed in  /etc/shells.
Working with Groups
Groups in unix offer a way to share files with certain users but deny access to all others. The idea is that you can set read or write permission bits for a particular group, excluding everyone else.
The /etc/group file defines the group IDs (such as the one found in the /etc/passwd files.

Getty and login
Getty is a program that attaches to terminals and displays a login prompt
On most linux system, getty is  complicated because the system only uses it for login on virtual terminal. 
After you enter your login name, getty replaces itself with the login program, which ask for your password. If you enter correct password, login replaces itself(using exec() with your shell. Otherwise, you get a  “login incorrect message”.

Setting the Time
Unix machines depend on accurate timekeeping. The kernel maintains the system clock, which is the clock that is consulted when you run commands like date. You can also set the system clock using the date command, but it’s usually a bad idea to do so because you’ll never get the time exactly right. Your system clock should be as close to the correct time as possible.
The kernel usually set its time based on their RTC at boot time, and you can reset the system clock to the current hardware time with hwclock. You can set the RTC to your kernel’s UTC Clock using this command #hwclock –systohc –utcv.12:00 midnight on January 1, 1970 UTC. To see number at the moment. Run $ date +%s.
Kernel Time Representation and Time Zones
Kernel’s system clock represents the current time as the number of second since 
Network Time
If your machine is permanently connected to the internet, you can run a Network Time protocol (NTP) daemon to maintain the time using a remote server. Many distributions have built-in support for an NTP daemon, but it may not be enabled by default. You might need to install an ntpd package to get it to work.
Scheduling Recurring Task with Cron
The unix cron service runs programs repeatedly on a fixed schedule. Most experienced administrators consider cron to be vital to the system because it can perform automatic system maintenance.
You can run any program with cron whatever time suit you. The program running through cron is called a cron job. To install a cron job, you’ll crate an entry line in your contab file, usually by running the crontab command. 
For example, the crontab entry schedule the /home/juster/bin’spkake command daily at 9:15 am
15 09 *** /home/juster/bin/spkake.

Installing crontab files
Each user can have his or her own crontab files, which means that every system may have multiple crontab, usually found in /var/spool/cron/contabs. Normal uses can’t write to this directory, the crontab command installs list, edits, and removes a user’s crontab.
The easiest way to install a crontab is to put your crontab entries into a file and then use crontab file to install file as your current crontab.
Scheduling  Recurring Tasks with cron
The unit cron service runs programs repeatedly on a fixed schedule. Most experience administrators

Process ownership, effective UID, REAL UID, AND SAVED UID.
Our discussion of user IDs so far has been simplified. In reality, every process has more than one user ID. We’ve described the effective user ID (euid), which defines the access rights for a process. A second user ID, the real user ID (ruid), indicates who initiated a process.  When you run a setuid program, linux sets the effective user ID to the program’s owner during execution, but it keeps your original user ID in the real user ID.
On modern systems, the difference between the effective and real user IDs is confusing, so much so that a lot of documentation regarding process ownerships is incorrect.
PAM
To accommodate flexibility in user authentication, in 1995 sun microsystem proposed a new standard called pluggable authentication modules (PAM), a system of shared libraries for authentication (open source software foundation RFC 86.0, October 1995) To authenticate a user, an application hands the user to PAM to determine whether the user can successfully identify itself,




